//
// Created by outline on 2023/6/30.
//
#include "sigvector_fm.h"
#include "main_cpp.h"
#include <algorithm>

#define BESSEL_RES_NUM (101)
const float32_t BESSEL[][BESSEL_RES_NUM] = {
        {0.765198, 0.742796, 0.719622, 0.695720, 0.671133, 0.645906, 0.620086, 0.593720, 0.566855, 0.539541, 0.511828, 0.483764, 0.455402, 0.426792, 0.397985, 0.369033, 0.339986, 0.310898, 0.281819, 0.252799, 0.223891, 0.195143, 0.166607, 0.138330, 0.110362, 0.082750, 0.055540, 0.028778, 0.002508, 0.023227, 0.048384, 0.072923, 0.096805, 0.119992, 0.142449, 0.164141, 0.185036, 0.205102, 0.224312, 0.242636, 0.260052, 0.276535, 0.292064, 0.306621, 0.320188, 0.332751, 0.344296, 0.354814, 0.364296, 0.372735, 0.380128, 0.386472, 0.391769, 0.396020, 0.399230, 0.401406, 0.402556, 0.402692, 0.401826, 0.399973, 0.397150, 0.393375, 0.388670, 0.383056, 0.376557, 0.369200, 0.361011, 0.352020, 0.342257, 0.331753, 0.320543, 0.308659, 0.296138, 0.283016, 0.269331, 0.255121, 0.240425, 0.225284, 0.209738, 0.193829, 0.177597, 0.161085, 0.144335, 0.127389, 0.110290, 0.093081, 0.075803, 0.058499, 0.041210, 0.023978, 0.006844, 0.010152, 0.026971, 0.043573, 0.059920, 0.075975, 0.091703, 0.107067, 0.122033, 0.136570, 0.150645},
        {0.440051, 0.455897, 0.470902, 0.485041, 0.498289, 0.510623, 0.522023, 0.532470, 0.541948, 0.550441, 0.557937, 0.564424, 0.569896, 0.574344, 0.577765, 0.580156, 0.581517, 0.581849, 0.581157, 0.579446, 0.576725, 0.573003, 0.568292, 0.562607, 0.555963, 0.548378, 0.539873, 0.530467, 0.520185, 0.509052, 0.497094, 0.484340, 0.470818, 0.456561, 0.441601, 0.425972, 0.409709, 0.392849, 0.375427, 0.357485, 0.339059, 0.320191, 0.300921, 0.281291, 0.261343, 0.241120, 0.220663, 0.200018, 0.179226, 0.158331, 0.137378, 0.116408, 0.095466, 0.074593, 0.053834, 0.033229, 0.012821, 0.007350, 0.027244, 0.046821, 0.066043, 0.084873, 0.103273, 0.121209, 0.138647, 0.155553, 0.171897, 0.187647, 0.202776, 0.217255, 0.231060, 0.244167, 0.256553, 0.268197, 0.279081, 0.289187, 0.298500, 0.307006, 0.314695, 0.321555, 0.327579, 0.332761, 0.337097, 0.340585, 0.343223, 0.345014, 0.345961, 0.346069, 0.345345, 0.343798, 0.341438, 0.338279, 0.334333, 0.329617, 0.324148, 0.317945, 0.311028, 0.303419, 0.295142, 0.286222, 0.276684},
        {0.114903, 0.125579, 0.136564, 0.147830, 0.159349, 0.171091, 0.183027, 0.195125, 0.207356, 0.219687, 0.232088, 0.244525, 0.256968, 0.269383, 0.281739, 0.294003, 0.306144, 0.318128, 0.329926, 0.341505, 0.352834, 0.363884, 0.374624, 0.385025, 0.395059, 0.404698, 0.413915, 0.422684, 0.430980, 0.438779, 0.446059, 0.452797, 0.458973, 0.464567, 0.469562, 0.473939, 0.477685, 0.480786, 0.483227, 0.484999, 0.486091, 0.486496, 0.486207, 0.485219, 0.483528, 0.481132, 0.478032, 0.474228, 0.469723, 0.464521, 0.458629, 0.452054, 0.444805, 0.436893, 0.428330, 0.419128, 0.409304, 0.398874, 0.387855, 0.376266, 0.364128, 0.351463, 0.338292, 0.324641, 0.310535, 0.295998, 0.281059, 0.265746, 0.250086, 0.234110, 0.217849, 0.201333, 0.184593, 0.167662, 0.150573, 0.133358, 0.116050, 0.098684, 0.081292, 0.063907, 0.046565, 0.029298, 0.012140, 0.004877, 0.021718, 0.038353, 0.054748, 0.070873, 0.086695, 0.102186, 0.117315, 0.132055, 0.146375, 0.160251, 0.173656, 0.186565, 0.198954, 0.210800, 0.222082, 0.232779, 0.242873},
        {0.019563, 0.022500, 0.025695, 0.029151, 0.032874, 0.036868, 0.041136, 0.045679, 0.050498, 0.055593, 0.060964, 0.066608, 0.072523, 0.078706, 0.085150, 0.091851, 0.098802, 0.105996, 0.113423, 0.121076, 0.128943, 0.137014, 0.145277, 0.153718, 0.162325, 0.171084, 0.179979, 0.188995, 0.198115, 0.207323, 0.216600, 0.225930, 0.235294, 0.244672, 0.254045, 0.263394, 0.272699, 0.281938, 0.291093, 0.300141, 0.309063, 0.317837, 0.326443, 0.334859, 0.343066, 0.351043, 0.358769, 0.366224, 0.373389, 0.380244, 0.386770, 0.392949, 0.398763, 0.404194, 0.409225, 0.413841, 0.418026, 0.421765, 0.425044, 0.427850, 0.430171, 0.431996, 0.433315, 0.434117, 0.434394, 0.434140, 0.433347, 0.432011, 0.430127, 0.427692, 0.424704, 0.421163, 0.417069, 0.412423, 0.407228, 0.401488, 0.395209, 0.388395, 0.381055, 0.373197, 0.364831, 0.355968, 0.346619, 0.336797, 0.326517, 0.315793, 0.304641, 0.293080, 0.281126, 0.268799, 0.256118, 0.243104, 0.229779, 0.216165, 0.202284, 0.188160, 0.173818, 0.159283, 0.144579, 0.129732, 0.114768},
        {0.002477, 0.002995, 0.003588, 0.004262, 0.005023, 0.005877, 0.006831, 0.007891, 0.009063, 0.010353, 0.011768, 0.013313, 0.014995, 0.016819, 0.018790, 0.020914, 0.023197, 0.025641, 0.028253, 0.031037, 0.033996, 0.037133, 0.040453, 0.043956, 0.047647, 0.051526, 0.055596, 0.059856, 0.064307, 0.068949, 0.073782, 0.078804, 0.084013, 0.089407, 0.094984, 0.100739, 0.106669, 0.112769, 0.119033, 0.125457, 0.132034, 0.138757, 0.145618, 0.152609, 0.159722, 0.166947, 0.174275, 0.181696, 0.189199, 0.196773, 0.204405, 0.212085, 0.219799, 0.227535, 0.235279, 0.243017, 0.250736, 0.258422, 0.266059, 0.273633, 0.281129, 0.288532, 0.295827, 0.302997, 0.310029, 0.316905, 0.323611, 0.330131, 0.336450, 0.342552, 0.348423, 0.354047, 0.359409, 0.364496, 0.369292, 0.373785, 0.377960, 0.381805, 0.385307, 0.388453, 0.391232, 0.393634, 0.395647, 0.397261, 0.398468, 0.399259, 0.399625, 0.399560, 0.399058, 0.398111, 0.396717, 0.394870, 0.392567, 0.389807, 0.386586, 0.382906, 0.378766, 0.374167, 0.369111, 0.363601, 0.357642,},
        {0.000250, 0.000317, 0.000399, 0.000496, 0.000610, 0.000744, 0.000901, 0.001082, 0.001290, 0.001528, 0.001799, 0.002106, 0.002452, 0.002841, 0.003275, 0.003758, 0.004294, 0.004886, 0.005538, 0.006255, 0.007040, 0.007896, 0.008828, 0.009841, 0.010937, 0.012121, 0.013397, 0.014770, 0.016242, 0.017818, 0.019502, 0.021297, 0.023207, 0.025236, 0.027388, 0.029664, 0.032069, 0.034605, 0.037276, 0.040083, 0.043028, 0.046115, 0.049345, 0.052719, 0.056238, 0.059904, 0.063717, 0.067677, 0.071785, 0.076040, 0.080442, 0.084989, 0.089680, 0.094513, 0.099485, 0.104596, 0.109840, 0.115215, 0.120718, 0.126343, 0.132087, 0.137943, 0.143908, 0.149974, 0.156136, 0.162387, 0.168720, 0.175127, 0.181601, 0.188133, 0.194715, 0.201337, 0.207991, 0.214667, 0.221355, 0.228045, 0.234725, 0.241386, 0.248017, 0.254605, 0.261141, 0.267611, 0.274004, 0.280308, 0.286512, 0.292602, 0.298567, 0.304394, 0.310070, 0.315585, 0.320925, 0.326078, 0.331031, 0.335774, 0.340294, 0.344578, 0.348617, 0.352398, 0.355911, 0.359144, 0.362087}
};

//#define BESSEL_RES_NUM (181)
//const float32_t BESSEL[][BESSEL_RES_NUM] = {
//        {0.765198, 0.742796, 0.719622, 0.695720, 0.671133, 0.645906, 0.620086, 0.593720, 0.566855, 0.539541, 0.511828, 0.483764, 0.455402, 0.426792, 0.397985, 0.369033, 0.339986, 0.310898, 0.281819, 0.252799, 0.223891, 0.195143, 0.166607, 0.138330, 0.110362, 0.082750, 0.055540, 0.028778, 0.002508, 0.023227, 0.048384, 0.072923, 0.096805, 0.119992, 0.142449, 0.164141, 0.185036, 0.205102, 0.224312, 0.242636, 0.260052, 0.276535, 0.292064, 0.306621, 0.320188, 0.332751, 0.344296, 0.354814, 0.364296, 0.372735, 0.380128, 0.386472, 0.391769, 0.396020, 0.399230, 0.401406, 0.402556, 0.402692, 0.401826, 0.399973, 0.397150, 0.393375, 0.388670, 0.383056, 0.376557, 0.369200, 0.361011, 0.352020, 0.342257, 0.331753, 0.320543, 0.308659, 0.296138, 0.283016, 0.269331, 0.255121, 0.240425, 0.225284, 0.209738, 0.193829, 0.177597, 0.161085, 0.144335, 0.127389, 0.110290, 0.093081, 0.075803, 0.058499, 0.041210, 0.023978, 0.006844, 0.010152, 0.026971, 0.043573, 0.059920, 0.075975, 0.091703, 0.107067, 0.122033, 0.136570, 0.150645, 0.164229, 0.177291, 0.189806, 0.201747, 0.213090, 0.223812, 0.233892, 0.243311, 0.252050, 0.260095, 0.267430, 0.274043, 0.279925, 0.285065, 0.289457, 0.293096, 0.295978, 0.298102, 0.299468, 0.300079, 0.299938, 0.299051, 0.297426, 0.295071, 0.291997, 0.288217, 0.283745, 0.278596, 0.272788, 0.266340, 0.259270, 0.251602, 0.243357, 0.234559, 0.225234, 0.215408, 0.205108, 0.194362, 0.183200, 0.171651, 0.159746, 0.147517, 0.134996, 0.122215, 0.109207, 0.096006, 0.082645, 0.069157, 0.055577, 0.041939, 0.028277, 0.014623, 0.001012, 0.012523, 0.025949, 0.039234, 0.052346, 0.065253, 0.077926, 0.090334, 0.102447, 0.114239, 0.125682, 0.136748, 0.147414, 0.157655, 0.167448, 0.176772, 0.185605, 0.193929, 0.201726, 0.208979, 0.215673, 0.221795, 0.227333, 0.232276, 0.236615, 0.240341, 0.243450, 0.245936},
//        {0.440051, 0.455897, 0.470902, 0.485041, 0.498289, 0.510623, 0.522023, 0.532470, 0.541948, 0.550441, 0.557937, 0.564424, 0.569896, 0.574344, 0.577765, 0.580156, 0.581517, 0.581849, 0.581157, 0.579446, 0.576725, 0.573003, 0.568292, 0.562607, 0.555963, 0.548378, 0.539873, 0.530467, 0.520185, 0.509052, 0.497094, 0.484340, 0.470818, 0.456561, 0.441601, 0.425972, 0.409709, 0.392849, 0.375427, 0.357485, 0.339059, 0.320191, 0.300921, 0.281291, 0.261343, 0.241120, 0.220663, 0.200018, 0.179226, 0.158331, 0.137378, 0.116408, 0.095466, 0.074593, 0.053834, 0.033229, 0.012821, 0.007350, 0.027244, 0.046821, 0.066043, 0.084873, 0.103273, 0.121209, 0.138647, 0.155553, 0.171897, 0.187647, 0.202776, 0.217255, 0.231060, 0.244167, 0.256553, 0.268197, 0.279081, 0.289187, 0.298500, 0.307006, 0.314695, 0.321555, 0.327579, 0.332761, 0.337097, 0.340585, 0.343223, 0.345014, 0.345961, 0.346069, 0.345345, 0.343798, 0.341438, 0.338279, 0.334333, 0.329617, 0.324148, 0.317945, 0.311028, 0.303419, 0.295142, 0.286222, 0.276684, 0.266555, 0.255865, 0.244642, 0.232917, 0.220721, 0.208087, 0.195048, 0.181638, 0.167890, 0.153841, 0.139526, 0.124980, 0.110240, 0.095342, 0.080323, 0.065219, 0.050066, 0.034902, 0.019762, 0.004683, 0.010301, 0.025153, 0.039840, 0.054327, 0.068582, 0.082570, 0.096262, 0.109625, 0.122630, 0.135248, 0.147452, 0.159214, 0.170509, 0.181313, 0.191603, 0.201357, 0.210555, 0.219179, 0.227212, 0.234636, 0.241439, 0.247608, 0.253131, 0.257999, 0.262204, 0.265739, 0.268601, 0.270786, 0.272293, 0.273122, 0.273275, 0.272755, 0.271567, 0.269719, 0.267218, 0.264074, 0.260298, 0.255902, 0.250902, 0.245312, 0.239149, 0.232431, 0.225177, 0.217409, 0.209147, 0.200414, 0.191234, 0.181632, 0.171633, 0.161264, 0.150552, 0.139525, 0.128211, 0.116639, 0.104839, 0.092840, 0.080674, 0.068370, 0.055959, 0.043473},
//        {0.114903, 0.125579, 0.136564, 0.147830, 0.159349, 0.171091, 0.183027, 0.195125, 0.207356, 0.219687, 0.232088, 0.244525, 0.256968, 0.269383, 0.281739, 0.294003, 0.306144, 0.318128, 0.329926, 0.341505, 0.352834, 0.363884, 0.374624, 0.385025, 0.395059, 0.404698, 0.413915, 0.422684, 0.430980, 0.438779, 0.446059, 0.452797, 0.458973, 0.464567, 0.469562, 0.473939, 0.477685, 0.480786, 0.483227, 0.484999, 0.486091, 0.486496, 0.486207, 0.485219, 0.483528, 0.481132, 0.478032, 0.474228, 0.469723, 0.464521, 0.458629, 0.452054, 0.444805, 0.436893, 0.428330, 0.419128, 0.409304, 0.398874, 0.387855, 0.376266, 0.364128, 0.351463, 0.338292, 0.324641, 0.310535, 0.295998, 0.281059, 0.265746, 0.250086, 0.234110, 0.217849, 0.201333, 0.184593, 0.167662, 0.150573, 0.133358, 0.116050, 0.098684, 0.081292, 0.063907, 0.046565, 0.029298, 0.012140, 0.004877, 0.021718, 0.038353, 0.054748, 0.070873, 0.086695, 0.102186, 0.117315, 0.132055, 0.146375, 0.160251, 0.173656, 0.186565, 0.198954, 0.210800, 0.222082, 0.232779, 0.242873, 0.252346, 0.261182, 0.269365, 0.276882, 0.283721, 0.289871, 0.295324, 0.300072, 0.304109, 0.307430, 0.310033, 0.311916, 0.313080, 0.313525, 0.313256, 0.312278, 0.310596, 0.308219, 0.305155, 0.301417, 0.297016, 0.291966, 0.286282, 0.279980, 0.273078, 0.265595, 0.257551, 0.248968, 0.239867, 0.230273, 0.220210, 0.209703, 0.198779, 0.187465, 0.175788, 0.163778, 0.151463, 0.138873, 0.126039, 0.112992, 0.099761, 0.086380, 0.072878, 0.059289, 0.045643, 0.031973, 0.018309, 0.004684, 0.008871, 0.022325, 0.035647, 0.048808, 0.061778, 0.074527, 0.087027, 0.099251, 0.111170, 0.122759, 0.133993, 0.144847, 0.155298, 0.165323, 0.174901, 0.184011, 0.192635, 0.200755, 0.208354, 0.215417, 0.221929, 0.227879, 0.233255, 0.238046, 0.242245, 0.245845, 0.248839, 0.251223, 0.252995, 0.254153, 0.254698, 0.254630},
//        {0.019563, 0.022500, 0.025695, 0.029151, 0.032874, 0.036868, 0.041136, 0.045679, 0.050498, 0.055593, 0.060964, 0.066608, 0.072523, 0.078706, 0.085150, 0.091851, 0.098802, 0.105996, 0.113423, 0.121076, 0.128943, 0.137014, 0.145277, 0.153718, 0.162325, 0.171084, 0.179979, 0.188995, 0.198115, 0.207323, 0.216600, 0.225930, 0.235294, 0.244672, 0.254045, 0.263394, 0.272699, 0.281938, 0.291093, 0.300141, 0.309063, 0.317837, 0.326443, 0.334859, 0.343066, 0.351043, 0.358769, 0.366224, 0.373389, 0.380244, 0.386770, 0.392949, 0.398763, 0.404194, 0.409225, 0.413841, 0.418026, 0.421765, 0.425044, 0.427850, 0.430171, 0.431996, 0.433315, 0.434117, 0.434394, 0.434140, 0.433347, 0.432011, 0.430127, 0.427692, 0.424704, 0.421163, 0.417069, 0.412423, 0.407228, 0.401488, 0.395209, 0.388395, 0.381055, 0.373197, 0.364831, 0.355968, 0.346619, 0.336797, 0.326517, 0.315793, 0.304641, 0.293080, 0.281126, 0.268799, 0.256118, 0.243104, 0.229779, 0.216165, 0.202284, 0.188160, 0.173818, 0.159283, 0.144579, 0.129732, 0.114768, 0.099715, 0.084598, 0.069445, 0.054283, 0.039140, 0.024042, 0.009017, 0.005908, 0.020705, 0.035347, 0.049807, 0.064060, 0.078078, 0.091837, 0.105310, 0.118474, 0.131303, 0.143775, 0.155867, 0.167556, 0.178821, 0.189641, 0.199998, 0.209872, 0.219245, 0.228102, 0.236426, 0.244202, 0.251418, 0.258061, 0.264120, 0.269584, 0.274446, 0.278697, 0.282332, 0.285346, 0.287734, 0.289495, 0.290628, 0.291132, 0.291010, 0.290264, 0.288899, 0.286920, 0.284333, 0.281148, 0.277372, 0.273017, 0.268094, 0.262616, 0.256598, 0.250053, 0.243000, 0.235454, 0.227434, 0.218960, 0.210051, 0.200730, 0.191017, 0.180935, 0.170509, 0.159761, 0.148718, 0.137404, 0.125845, 0.114068, 0.102099, 0.089966, 0.077695, 0.065315, 0.052854, 0.040339, 0.027798, 0.015259, 0.002751, 0.009700, 0.022065, 0.034318, 0.046432, 0.058379},
//        {0.002477, 0.002995, 0.003588, 0.004262, 0.005023, 0.005877, 0.006831, 0.007891, 0.009063, 0.010353, 0.011768, 0.013313, 0.014995, 0.016819, 0.018790, 0.020914, 0.023197, 0.025641, 0.028253, 0.031037, 0.033996, 0.037133, 0.040453, 0.043956, 0.047647, 0.051526, 0.055596, 0.059856, 0.064307, 0.068949, 0.073782, 0.078804, 0.084013, 0.089407, 0.094984, 0.100739, 0.106669, 0.112769, 0.119033, 0.125457, 0.132034, 0.138757, 0.145618, 0.152609, 0.159722, 0.166947, 0.174275, 0.181696, 0.189199, 0.196773, 0.204405, 0.212085, 0.219799, 0.227535, 0.235279, 0.243017, 0.250736, 0.258422, 0.266059, 0.273633, 0.281129, 0.288532, 0.295827, 0.302997, 0.310029, 0.316905, 0.323611, 0.330131, 0.336450, 0.342552, 0.348423, 0.354047, 0.359409, 0.364496, 0.369292, 0.373785, 0.377960, 0.381805, 0.385307, 0.388453, 0.391232, 0.393634, 0.395647, 0.397261, 0.398468, 0.399259, 0.399625, 0.399560, 0.399058, 0.398111, 0.396717, 0.394870, 0.392567, 0.389807, 0.386586, 0.382906, 0.378766, 0.374167, 0.369111, 0.363601, 0.357642, 0.351237, 0.344393, 0.337116, 0.329414, 0.321295, 0.312768, 0.303844, 0.294534, 0.284849, 0.274803, 0.264408, 0.253680, 0.242633, 0.231283, 0.219647, 0.207742, 0.195585, 0.183197, 0.170594, 0.157798, 0.144828, 0.131706, 0.118451, 0.105087, 0.091633, 0.078114, 0.064551, 0.050966, 0.037383, 0.023825, 0.010314, 0.003126, 0.016472, 0.029702, 0.042791, 0.055719, 0.068461, 0.080996, 0.093302, 0.105357, 0.117141, 0.128631, 0.139808, 0.150653, 0.161145, 0.171267, 0.181000, 0.190328, 0.199233, 0.207701, 0.215716, 0.223264, 0.230333, 0.236909, 0.242982, 0.248541, 0.253578, 0.258083, 0.262049, 0.265471, 0.268342, 0.270660, 0.272421, 0.273622, 0.274264, 0.274347, 0.273872, 0.272842, 0.271260, 0.269131, 0.266461, 0.263258, 0.259529, 0.255283, 0.250531, 0.245284, 0.239554, 0.233354, 0.226699, 0.219603},
//        {0.000250, 0.000317, 0.000399, 0.000496, 0.000610, 0.000744, 0.000901, 0.001082, 0.001290, 0.001528, 0.001799, 0.002106, 0.002452, 0.002841, 0.003275, 0.003758, 0.004294, 0.004886, 0.005538, 0.006255, 0.007040, 0.007896, 0.008828, 0.009841, 0.010937, 0.012121, 0.013397, 0.014770, 0.016242, 0.017818, 0.019502, 0.021297, 0.023207, 0.025236, 0.027388, 0.029664, 0.032069, 0.034605, 0.037276, 0.040083, 0.043028, 0.046115, 0.049345, 0.052719, 0.056238, 0.059904, 0.063717, 0.067677, 0.071785, 0.076040, 0.080442, 0.084989, 0.089680, 0.094513, 0.099485, 0.104596, 0.109840, 0.115215, 0.120718, 0.126343, 0.132087, 0.137943, 0.143908, 0.149974, 0.156136, 0.162387, 0.168720, 0.175127, 0.181601, 0.188133, 0.194715, 0.201337, 0.207991, 0.214667, 0.221355, 0.228045, 0.234725, 0.241386, 0.248017, 0.254605, 0.261141, 0.267611, 0.274004, 0.280308, 0.286512, 0.292602, 0.298567, 0.304394, 0.310070, 0.315585, 0.320925, 0.326078, 0.331031, 0.335774, 0.340294, 0.344578, 0.348617, 0.352398, 0.355911, 0.359144, 0.362087, 0.364731, 0.367065, 0.369080, 0.370767, 0.372118, 0.373124, 0.373779, 0.374075, 0.374006, 0.373565, 0.372749, 0.371551, 0.369968, 0.367996, 0.365633, 0.362876, 0.359724, 0.356177, 0.352234, 0.347896, 0.343165, 0.338042, 0.332531, 0.326635, 0.320358, 0.313706, 0.306685, 0.299301, 0.291561, 0.283474, 0.275048, 0.266293, 0.257220, 0.247838, 0.238160, 0.228198, 0.217965, 0.207474, 0.196739, 0.185775, 0.174597, 0.163222, 0.151664, 0.139942, 0.128072, 0.116071, 0.103959, 0.091752, 0.079471, 0.067133, 0.054758, 0.042366, 0.029975, 0.017606, 0.005279, 0.006987, 0.019171, 0.031255, 0.043217, 0.055039, 0.066700, 0.078182, 0.089464, 0.100529, 0.111357, 0.121930, 0.132230, 0.142240, 0.151943, 0.161321, 0.170360, 0.179043, 0.187356, 0.195284, 0.202813, 0.209932, 0.216627, 0.222887, 0.228702, 0.234062},
//
//};

const float32_t delta_mf = 0.05;    // mf [1, 6] step 0.05  == 1 : 0.05 : 6 , all 101

float32_t Sigvector_fm::cal_mf() {
    if (len_peaks < 2) {
        return 0;
    }
    uint32_t selected_peak_len = len_peaks;     // 不要后面的峰值，若要恢复需要再次调用find_peaks
    const float32_t *const x = fft_mag;
    float32_t *peaks_index = fft_mag + len / 2 + len / 4;   // 顺序峰值的下标
    float32_t *selected_peak_index = peaks_index;
    const uint32_t max_bessel_num = 6;      // 4个贝塞尔函数阶数0 1 2 3
    float32_t bessel_value[10] = {0};



    uint32_t center_index = find_center_index(selected_peak_index, selected_peak_len);
//    printf("\ncenter1: %d  center_index: %d  peaks length: %d", (int)center_index,
//                        (int)selected_peak_index[(uint32_t)center_index],
//           (int)len_peaks);
    // find bessel value

//    for (uint32_t i = 0; i < selected_peak_len; ++i) {      // gen the index contain the useful info.
//        uint32_t temp_index = peaks(i, 1);
//        printf("%d ", (int)temp_index);
//    }

    uint32_t bessel_num_count = 0;
    float64_t normal_coe = 0;
    for (int j = 0; j < max_bessel_num; ++j) {
//        if (peaks_index[center_index - j] < (float32_t)(len * 0.05) || peaks_index[center_index + j] > (float32_t)(len * 0.36)) {
//            break;
//        }
        bessel_value[bessel_num_count] = ( x[int(peaks_index[center_index - j])] +
                                x[int(peaks_index[center_index + j])] ) / 2;
//        printf("%d ", (int)bessel_value[j]);
        float64_t temp = (float64_t)bessel_value[bessel_num_count] * (float64_t)bessel_value[bessel_num_count];
        normal_coe += (bessel_num_count == 0) ? temp : 2 * temp;
        ++bessel_num_count;
    }

    for (int j = 0; j < bessel_num_count; ++j) {
        bessel_value[j] = (float32_t)std::sqrt( std::pow((float64_t)bessel_value[j], 2) / normal_coe );
    }


    // loss function
    float32_t a_loss = 0;
    float32_t loss_min = 1e8;
    uint32_t i_min = 0;
    for (uint32_t i = 0; i < BESSEL_RES_NUM; ++i) {
        a_loss = loss_function(bessel_value, bessel_num_count, i);
        if (a_loss < loss_min) {
            loss_min = a_loss;
            i_min = i;
        }
    }

    return (float32_t)i_min / (float32_t)20 + 1;
}

/**
 *
 * @param index_array
 * @param len_index_array
 * @return return the index of center peak.
 */
uint32_t Sigvector_fm::find_center_index(float32_t *index_array, uint32_t &len_index_array) {
    if (len_index_array < 2) {
        return (uint32_t)index_array[0];
    }
    const uint32_t side_num = 4;
    uint32_t result_index = 0;
    float32_t *x = fft_mag;

    float32_t acc_error_percent_min = 1000;
    uint32_t j_side_num_max = 0;
    fill_peak(index_array, len_index_array);
//    for (int i = 1; i < (int)len_index_array; ++i) {
    for (int i = (int)len_index_array - 2; i > 0; --i) {
        int j = 1;
        float32_t acc_error_percent = 0;
        while ((i - j > -1 && i + j < len_index_array) && j < side_num) {
            float32_t side_error = std::abs(x[(uint32_t)index_array[i - j]] - x[(uint32_t)index_array[i + j]]);
            float32_t error_percent = side_error * 2 / ( x[(uint32_t)index_array[i - j]] + x[(uint32_t)index_array[i + j]] );
            acc_error_percent += error_percent;
            ++j;
        }
        acc_error_percent /= (float32_t)(j - 1) + (float32_t)1e-10;     // cal avg of error

        if (acc_error_percent != 0 && acc_error_percent < acc_error_percent_min && j >= j_side_num_max) {
            acc_error_percent_min = acc_error_percent;
            result_index = i;
            j_side_num_max = j;
        }
    }

//    printf("\ncenter index: %d\n", (int)result_index);

    return result_index;
}

/**
 * least square loss function
 * @param bessel_value
 * @param bessel_len
 * @param i related to mf range [0, 100]
 * @return
 */
float32_t Sigvector_fm::loss_function(const float32_t *const bessel_value,
                                      uint32_t bessel_len, uint32_t i) {

    float32_t least_square_loss = 0;
    for (uint32_t j = 0; j < bessel_len; ++j) {
        least_square_loss += (float32_t)std::pow( bessel_value[j] - BESSEL[j][i], 2 );
    }
    return least_square_loss;
}


void Sigvector_fm::fill_peak(float32_t *peak_index, uint32_t &len_peak_index) {
    if (len_peak_index < 2 || len_peak_index > 100) {
        return;
    }
    float32_t temp_array[100] = {0};
    for (int i = 1; i < len_peak_index - 1; ++i) {
        float32_t laplace_value = peak_index[i - 1] + peak_index[i + 1] - 2 * peak_index[i];
        if (laplace_value > 0 && laplace_value > ((peak_index[i] - peak_index[i - 1]) * 0.8) ) {
            // fill right
            arm_copy_f32(peak_index, temp_array, i + 1);
            arm_copy_f32(peak_index + i + 1, temp_array + i + 2, len_peak_index - i - 1);
            temp_array[i + 1] = std::round((peak_index[i] + peak_index[i + 1] ) / 2);
            arm_copy_f32(temp_array, peak_index, ++len_peak_index);
        }
        if (laplace_value < 0 && (-laplace_value) > ((peak_index[i + 1] - peak_index[i]) * 0.8)) {
            arm_copy_f32(peak_index, temp_array, i);
            arm_copy_f32(peak_index + i, temp_array + i + 1, len_peak_index - i);
            temp_array[i] = std::round((peak_index[i - 1] + peak_index[i] ) / 2);
            arm_copy_f32(temp_array, peak_index, ++len_peak_index);
        }
    }
}

float32_t Sigvector_fm::cal_fsk_h(float32_t fs, float32_t rate) {
    uint32_t selected_peak_len = len_peaks;     // 不要后面的峰值，若要恢复需要再次调用find_peaks
    const float32_t *const x = fft_mag;
    float32_t *peaks_index = fft_mag + len / 2 + len / 4;   // 顺序峰值的下标
    float32_t *selected_peak_index = peaks_index;


    uint32_t center_index = find_center_index(selected_peak_index, selected_peak_len);
    return std::abs((float32_t)center_index - 1024) * fs * 2 / (float32_t)len / rate;
}



